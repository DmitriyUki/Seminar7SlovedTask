//Задача 49: Задайте двумерный массив. Найдите элементы, у которых оба индекса нечётные, и замените эти элементы на их квадраты.
//(в примере подсчет индексов начинается с 1 , как в математике)
//Например, изначально массив
//выглядел вот так:
//1 4 7 2
//5 9 2 3
//8 4 2 4
//Новый массив будет выглядеть
//вот так:
//1 4 7 2
//5 81 2 9
//8 4 2 4


int ReadNumber(string messageToUser) // используем метод перевода строки введенной пользователем в в число, в скобках 
//пишутся используемые аргументы
{
  Console.WriteLine(messageToUser);
  int value = Convert.ToInt32(Console.ReadLine());
  return value;
}

int[,] GetRandomMatrix(int rows, int columns, int leftBorder = 0, int rightBorder = 10) // задаем параметры (опции) нашей матрицы, 
//для этого в скобочках прописываем новые переменные int 1 строки, 2 столбцы. 
//Далее добавляем пораметры для создания рандомных чисел int leftBorder, int rightBorder, либо можно их задать по умолчанию, 
//тогда в вызывающей матрице не надо будет их вставлять, и отдельно делать под них переменные
{
  int[,] matrix = new int[rows, columns]; // создаем двумерный массив, выделяем под него память, 
//указываем после слов new int [колличество строк, колличество столбцов], 
//передавая те переменные которые мы задали в опциях к матрице

  for (int i = 0; i < matrix.GetLength(0); i++) // цикл который все массивы(строки), под вторым условием можно написать и rows, 
  //Иван сказал что будет тоже работать но он решил нас познакомить с методом, который будет получать от матрицы колличество 
  //строк GetLength(0)
  {
    for (int j = 0; j < matrix.GetLength(1); j++) // создаем внутренний(вложенный) цикл который будет перебирать элементы 
//внутри стоки(столбцы) GetLength(1) выдаст нам именно колличество столбцов, тут надо просто запомнить что 0 для строк, 
//1 для столюцов
    {
      matrix[i, j] = Random.Shared.Next(leftBorder, rightBorder + 1); // обращаемся к нашему элементу по i и j создаем 
      //рандомные значения, задав диапазон
    }
  }
  return matrix;
}

void MatrixSquare(int[,] matrix) // снова создаем метод который будет определять нечетность элементов по индексу и строке
{
  for (int i = 0; i < matrix.GetLength(0); i++)
  {
    for (int j = 0; j < matrix.GetLength(1); j++)
      if (i % 2 != 0 & j % 2 != 0) // проверка условия
      {
        matrix[i, j] = matrix[i, j] * matrix[i, j];
        // matrix[i, j] *= matrix[i, j] идентичные команды // возводим в квадрат элемент с нечетными индексами по строке и столбцу
      }
  }
}

void PrintMatrix(int[,] matrix) // метод PrintMatrix печатающий нашу матрицу на экран
{
  for (int i = 0; i < matrix.GetLength(0); i++)
  {
    for (int j = 0; j < matrix.GetLength(1); j++)
    {
      Console.Write(matrix[i, j] + " "); // выводим матрицу на экран
    }
    Console.WriteLine(); // после обработки сроки по вышеуказанному циклу и до перехода к следующей выводим обработанную строку
  }
}

int m = ReadNumber("Введите колличество строк:");
int n = ReadNumber("Введите колличество столбцов:");
int[,] myMatrix = GetRandomMatrix(m, n); // вызывающая матрица, суть в то что если указать сюда только значения для первых двух пераметров
                                         // они и будут использваться, а 3 и 4 парамет использваться не будет, если я вставлю туда какие-нибудь другие цифры, то они будут 
                                         //использоваться несмотря на то что уже цифры заданы в методе, при этом не обязательно их два сразу задавать, можно задать только один

//Console.WriteLine(string.Join(",", myMatrix)); // пытаемся вывести двухмерную матрицу в строку,но данный метод это делать не умеет

PrintMatrix(myMatrix); // вызываем метод по распечатке и распечатываем получившуюся матрицу
MatrixSquare(myMatrix);// вызываем метод который будет определять нечетность индексов строки и столбца элементов и возводить их в квадрат
Console.WriteLine(); // делаем строчку чтоб выведенные матрицы не сливались
PrintMatrix(myMatrix); // вызываем метод по распечатке и распечатываем получившуюся матрицу